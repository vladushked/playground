/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (!node)
            return NULL;
        
        map<Node*, Node*> visited;
        
        return DFS(node, visited);
    }
    
    Node* DFS(Node* node, map<Node*, Node*>& visited) {
        Node* new_node = new Node();
        new_node->val = node->val;
        
        visited.insert(make_pair(node, new_node));
        
        for (auto *n : node->neighbors) {
            auto pos = visited.find(n);
            if (pos == visited.end()) {
                new_node->neighbors.push_back(DFS(n, visited));
            } else {
                new_node->neighbors.push_back(pos->second);
            }
        }
        
        return new_node;
        
    }
};
