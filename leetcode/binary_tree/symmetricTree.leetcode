/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        // return iterative(root);
        return recursive(root, root);
    }
    
    bool iterative(TreeNode* root) {
        
        queue<TreeNode*> q;
        
        q.push(root);
        q.push(root);
        
        TreeNode* left, *right;
        
        while (!q.empty()) {
            left = q.front();
            q.pop();
            right = q.front();
            q.pop();
            
            if (left->val != right->val) 
                return false;
            
            if (left->left && right->right) {
                q.push(left->left);
                q.push(right->right);
            } else if (left->left || right->right) 
                return false;
            
            if (left->right && right->left) {
                q.push(left->right);
                q.push(right->left);
            } else if (left->right || right->left) 
                return false;
        }
        
        return true;
    }
    
    bool recursive(TreeNode* leftRoot, TreeNode* rightRoot) {
        if (!leftRoot && !rightRoot)
            return true;
        
        if (leftRoot && rightRoot && (leftRoot->val == rightRoot->val)) {
            return recursive(leftRoot->left, rightRoot->right) && recursive(leftRoot->right, rightRoot->left);
        } else 
            return false;
    }

};
