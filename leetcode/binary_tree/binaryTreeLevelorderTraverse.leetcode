/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        return visitLevelorder(root, 0);
    }
    
    vector<vector<int>> visitLevelorder(TreeNode* root, int level) {
        
        if (!root)
            return vector<vector<int>>();
        
        vector<vector<int>> toreturn;
        vector<int> value = {root->val};
        toreturn.push_back(value);
        
        vector<vector<int>> left = visitLevelorder(root->left, level + 1);
        vector<vector<int>> right = visitLevelorder(root->right, level + 1);
        
        if (left.size() != 0) {
            toreturn.insert(toreturn.end(), left.begin(), left.end());
        }
        if (right.size() != 0) {
            int i = 1;
            
            for (auto rightValue : right) {
                if (i < toreturn.size())
                    toreturn[i].insert(toreturn[i].end(), rightValue.begin(), rightValue.end());
                else 
                    toreturn.push_back(rightValue);
                i++;
            }
        }        
        
        
        return toreturn;
    }
};
